[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "pyaerocom"
version = "0.15.0"
authors = [{ name = "MET Norway" }]
description = "pyaerocom model evaluation software"
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
]
requires-python = ">=3.9"
dependencies = [
    "scitools-iris>=3.6.0",
    "xarray<=2022.10.0",
    "cartopy>=0.21.1",
    "matplotlib>=3.7.1",
    "scipy>=1.10.1",
    "pandas<=1.5.3",
    "numpy>=1.24.3",
    "seaborn>=0.12.2",
    "dask",
    "geonum",
    "LatLon23",             # required by geonum
    "SRTM.py",              # required by geonum
    "simplejson",
    "requests",
    "reverse-geocode",
    "tqdm",
    "openpyxl",
    "geojsoncontour",
    "typer>=0.7.0",
    # python < 3.10
    'importlib-metadata>=3.6; python_version < "3.10"',
    # python < 3.11
    'tomli>=2.0.1; python_version < "3.11"',
    'importlib-resources>=5.10; python_version < "3.11"',
    # https://github.com/SciTools/cf-units/issues/218
    'cf-units>=3.1; python_version >= "3.10"',
]

[project.readme]
file = "README.rst"
content-type = "text/x-rst"

[project.urls]
Homepage = "https://github.com/metno/pyaerocom"
"Bug Tracker" = "https://github.com/metno/pyaerocom/issues"
Documentation = "https://pyaerocom.readthedocs.io"
"Source Code" = "https://github.com/metno/pyaerocom"

[project.optional-dependencies]
docs = [
    "sphinx>=7.2.6",
    "sphinxcontrib-napoleon",
    "sphinx_rtd_theme",
    "sphinx-argparse",
    "nbsphinx",
]
test = [
    "pytest>=7.4",
    "pytest-dependency",
    "pytest-cov",
    "packaging",
    "pooch>=1.7.0",
]
lint = ["mypy>=1.5.1", "types-requests", "types-setuptools", "types-simplejson"]
dev = ["pytest-sugar", "pytest-xdist", "pre-commit"]

[project.scripts]
pya = "pyaerocom.scripts.cli:main"

[project.entry-points."pyaerocom.gridded"]
ReadMscwCtm = "pyaerocom.plugins.mscw_ctm.reader:ReadMscwCtm"

[project.entry-points."pyaerocom.ungridded"]
ReadGAW = "pyaerocom.plugins.gaw.reader:ReadGAW"
ReadGhost = "pyaerocom.plugins.ghost.reader:ReadGhost"
ReadMEP = "pyaerocom.plugins.mep.reader:ReadMEP"
ReadICOS = "pyaerocom.plugins.icos.reader:ReadICOS"
ReadIPCForest = "pyaerocom.plugins.ipcforests.reader:ReadIPCForest"

[tool.flit.sdist]
include = ["LICENSE", "README.*", "pyaerocom_env.yml", "tests"]
exclude = [
    ".git*",
    ".pre-commit-config.yaml",
    ".readthedocs.yaml",
    "changelog",
    "docs",
    "release_checklist.md",
    "scripts",
    "suppl",
]

[tool.pytest.ini_options]
minversion = "7.4"
log_cli = false
log_cli_level = "WARNING"
addopts = "--failed-first"
xfail_strict = true
testpaths = ["tests"]
filterwarnings = [
    # all warnings are errors
    "error",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    # except deprecation and future warnings ouside this packege
    'ignore::PendingDeprecationWarning:^(?!pyaerocom|tests).*:',
    'ignore::DeprecationWarning:^(?!pyaerocom|tests).*:',
    'ignore::FutureWarning:^(?!pyaerocom|tests).*:',
    # and not on this list
    "ignore:.*please install Basemap:UserWarning:geonum.*:",
    "ignore:Using DEFAULT_SPHERICAL_EARTH_RADIUS:UserWarning:iris.*:",
]

[tool.coverage.run]
source = ["pyaerocom"]
omit = [
    # not used
    "pyaerocom/aeroval/utils.py",
    "pyaerocom/io/read_aeronet_invv2.py",
    "pyaerocom/io/read_aeronet_sdav2.py",
    "pyaerocom/io/read_aeronet_sunv2.py",
    "pyaerocom/plugins/gaw/*",
    "pyaerocom/extras/satellite_l2/*",
    "pyaerocom/vert_coords.py",
]

[tool.coverage.report]
fail_under = 75
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "NotImplementedError",
    "abc.ABC",
    'if __name__ == "__main__":',
]

[tool.black]
target-version = ['py39']
extend_skip = ["pyaerocom-tutorials"]
line-length = 99

[tool.isort]
py_version = "39"
profile = "black"
src_paths = ["pyaerocom", "tests"]
extend_skip = ["pyaerocom-tutorials"]
line_length = 99

[tool.mypy]
python_version = "3.9"
warn_unused_configs = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = false
warn_unreachable = true
show_error_codes = true
pretty = true
sqlite_cache = true
exclude = "pyaerocom-tutorials|_build"

[[tool.mypy.overrides]]
module = [
    "cartopy.*",
    "iris.*",
    "matplotlib.*",
    "geonum.*",
    "geopy.*",
    "scipy.*",
    "mpl_toolkits.*",
    "cf_units",
    "geojsoncontour",
    "pandas",
    "dask",
    "reverse_geocode",
    "seaborn",
    "openpyxl",
    "tqdm",
    "coda",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = 99

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39, py310, py311, py312, format, lint, docs
skip_missing_interpreters = True
isolated_build = True
requires =
    setuptools >=40.6.0,<=60.9.3
    cython > 0.29.15 

[testenv]
commands_pre =
    python --version
commands =
    pytest -ra -q {posargs:--cov --no-cov-on-fail}
extras = 
    test
setenv =
    UDUNITS2_XML_PATH=/usr/share/xml/udunits/udunits2-common.xml

[testenv:format]
commands =
    pre-commit run --all-files --show-diff-on-failure
deps =
    pre-commit

[testenv:lint]
ignore_outcome = True
commands =
    mypy pyaerocom/
extras = 
    lint

[testenv:docs]
commands =
    sphinx-build {posargs:-T} docs/ docs/_build/html
extras = 
    docs
"""
